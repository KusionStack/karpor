# Copyright The Karpor Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file contains all available configuration options
# with their default values.
# For complete .golangci.yml configuration, reference: https://golangci-lint.run/usage/configuration/#config-file

# options for analysis running
run:
  timeout: 8m
  go: '1.19'
  concurrency: 4
  allow-parallel-runners: true
  cache-dir: .cache/golangci-lint
  modules-download-mode: readonly
  max-same-issues: 50
  # Disable problematic analyzers
  disable-default-analyzers: true

linters:
  disable-all: true
  enable: # please keep this alphabetized
    - bodyclose
    - contextcheck
    - depguard
    - dogsled
    - errorlint
    - errname
    - exportloopref
    - forbidigo
    - gocritic
    - goconst
    - gofumpt
    - govet  # Re-enable govet with custom settings
    - gosimple
    - ineffassign
    - loggercheck
    - misspell
    - nilerr
    - nilnil
    - nolintlint
    - prealloc
    - predeclared
    - staticcheck
    - stylecheck
    - tagliatelle
    - tparallel
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - whitespace

linters-settings:
  gofumpt:
    # Choose whether or not to use the extra rules that are disabled
    # by default
    extra-rules: false
  tagliatelle:
    # Check the struck tag name case.
    case:
      # Use the struct field name to check the name of the struct tag.
      # Default: false
      use-field-name: true
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `upperSnake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`, `header`.
        json: goCamel
        yaml: goCamel
        xml: goCamel
        toml: goCamel
  errorlint:
    # Check whether fmt.Errorf uses the %w verb for formatting errors.
    # See the https://github.com/polyfloyd/go-errorlint for caveats.
    # Default: true
    errorf: false
  govet:
    # Explicitly disable buildssa analyzer
    disable:
      - buildssa
    enable-all: true
    settings:
      printf:
        funcs:
          - (github.com/sirupsen/logrus.FieldLogger).Infof
          - (github.com/sirupsen/logrus.FieldLogger).Warnf
          - (github.com/sirupsen/logrus.FieldLogger).Errorf
          - (github.com/sirupsen/logrus.FieldLogger).Fatalf

issues:
  exclude-rules:
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
    - path: \.pb\.go
      linters:
        - all
    - path: \.gen\.go
      linters:
        - all
    - path: pkg/kubernetes/.*
      linters:
        - goanalysis_metalinter
    - path: pkg/kubernetes/internalimport/internal_import.go
      linters:
        - typecheck
        - govet
  exclude-dirs:
    - "pkg/kubernetes/generated"
    - "pkg/kubernetes/openapi"
    - "api/openapispec"
    - "hack"
    - vendor
    - third_party
    - test
  exclude-files:
    - internal_import\.go$
    - pkg/kubernetes/openapi/zz_generated.openapi.go
  exclude:
    - "G306: Expect WriteFile permissions to be 0600 or less"
    - "ST1018: string literal contains Unicode control characters, consider using escape sequences instead"
    - "ifElseChain: rewrite if-else to switch statement"
    - "S1000: should use for range instead of for { select {} }"
    - "SA4004: the surrounding loop is unconditionally terminated"
