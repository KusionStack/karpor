/*
Copyright The Karbour Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1beta1

import (
	"context"
	time "time"

	searchv1beta1 "github.com/KusionStack/karbour/pkg/kubernetes/apis/search/v1beta1"
	versioned "github.com/KusionStack/karbour/pkg/kubernetes/generated/clientset/versioned"
	internalinterfaces "github.com/KusionStack/karbour/pkg/kubernetes/generated/informers/externalversions/internalinterfaces"
	v1beta1 "github.com/KusionStack/karbour/pkg/kubernetes/generated/listers/search/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// TransformRuleInformer provides access to a shared informer and lister for
// TransformRules.
type TransformRuleInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1beta1.TransformRuleLister
}

type transformRuleInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewTransformRuleInformer constructs a new informer for TransformRule type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewTransformRuleInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredTransformRuleInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredTransformRuleInformer constructs a new informer for TransformRule type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredTransformRuleInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SearchV1beta1().TransformRules().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SearchV1beta1().TransformRules().Watch(context.TODO(), options)
			},
		},
		&searchv1beta1.TransformRule{},
		resyncPeriod,
		indexers,
	)
}

// defaultInformer provides a default implementation for the SharedIndexInformer interface.
func (f *transformRuleInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredTransformRuleInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

// Informer returns the SharedIndexInformer for TransformRule resources.
func (f *transformRuleInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&searchv1beta1.TransformRule{}, f.defaultInformer)
}

// Lister returns the TransformRuleLister for TransformRule resources.
func (f *transformRuleInformer) Lister() v1beta1.TransformRuleLister {
	return v1beta1.NewTransformRuleLister(f.Informer().GetIndexer())
}
