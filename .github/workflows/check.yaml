name: Check
on:
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
jobs:
  Test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go 1.19
        uses: actions/setup-go@v5
        with:
          go-version: '1.19'
      - name: Download dependencies
        run: |
          go mod download
          go mod verify
      - name: Running go tests with coverage
        env:
          GO111MODULE: on
        run: make cover
      - name: Send coverage
        uses: shogo82148/actions-goveralls@v1
        with:
          path-to-profile: coverage.out

  GolangLint:
    name: Golang Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go 1.19
        uses: actions/setup-go@v5
        with:
          go-version: '1.19'
          cache: true
      - name: Cache golangci-lint
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/golangci-lint
            ~/.cache/go-build
          key: ${{ runner.os }}-golangci-lint-${{ hashFiles('.golangci.yml') }}-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golangci-lint-${{ hashFiles('.golangci.yml') }}-
            ${{ runner.os }}-golangci-lint-
      - name: Download dependencies
        run: |
          go mod download
          go mod verify
      - name: golangci-lint
        # NOTE: This golangci-lint action MUST be specified as v2 version, otherwise an error will be reported:
        # Running error: can't run linter goanalysis_metalinter\nbuildssa: failed to load package main: could
        # not load export data: no export data for \"k8s.io/kube-aggregator\"
        uses: golangci/golangci-lint-action@v2
        env:
          GO111MODULE: on
          GOFLAGS: -mod=readonly
        with:
          version: v1.58.2
          args: >
            --timeout=10m
            --verbose
            --new-from-rev=HEAD~1
            --max-issues-per-linter=0
            --max-same-issues=0
          github-token: ${{ github.token }}
          only-new-issues: true
          skip-pkg-cache: false
          skip-build-cache: false

  LicenseCheck:
    name: License Check
    runs-on: ubuntu-latest
    env:
      TERM: xterm
    steps:
      - uses: actions/checkout@v4
      - uses: apache/skywalking-eyes@main
